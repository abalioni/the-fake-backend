import { Throttling, ThrottlingManager } from './interfaces';

/**
 * Create a new throttling manager.
 *
 * @param throttlings The current list of throttlings
 * @return The throttling manager
 */
export function createThrottlingManager(
  throttlings: Throttling[] = []
): ThrottlingManager {
  let currentThrottlingIndex: number | null = null;

  return {
    /**
     * Get all throttlings.
     *
     * @return The current list of throttlings
     */
    getAll() {
      return throttlings;
    },

    /**
     * Get current throttling.
     *
     * @return The current throttling
     */
    getCurrent() {
      if (currentThrottlingIndex !== null) {
        return throttlings[currentThrottlingIndex];
      }
      return null;
    },

    /**
     * Get current proxy delay generating a random number between the throttling minimum and maximum milliseconds.
     *
     * @return A random number generated by throttling minimum and maximum milliseconds
     */
    getCurrentDelay() {
      const {
        values: [minimum, maximum],
      } = this.getCurrent() || { values: [0, 0] };
      return Math.ceil(Math.random() * (minimum - maximum) + maximum);
    },

    /**
     * Toggle current throttling moving to the next position on list.
     */
    toggleCurrent() {
      if (currentThrottlingIndex === null) {
        currentThrottlingIndex = 0;
      } else if (currentThrottlingIndex === throttlings.length - 1) {
        currentThrottlingIndex = null;
      } else {
        currentThrottlingIndex += 1;
      }
    },
  };
}
